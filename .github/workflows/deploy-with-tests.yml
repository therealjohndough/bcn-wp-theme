name: 🚀 Deploy BCN Theme with Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests (not recommended)'
        required: false
        default: false
        type: boolean

env:
  THEME_NAME: 'bcn-wp-theme'
  STAGING_URL: 'https://staging6.buffalocannabisnetwork.com'
  PRODUCTION_URL: 'https://buffalocannabisnetwork.com'

jobs:
  # Code Quality and Validation
  validate:
    name: 🔍 Validate Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo

      - name: 📦 Install Composer dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: 🔍 Run PHP CodeSniffer
        run: |
          ./vendor/bin/phpcs --standard=phpcs.xml.dist --report=checkstyle --report-file=phpcs-report.xml || true

      - name: 🎨 Validate CSS
        run: |
          echo "Validating CSS files..."
          find assets/css -name "*.css" -exec echo "Checking {}" \;
          # Check for basic CSS syntax
          for file in assets/css/*.css; do
            if [ -f "$file" ]; then
              echo "Validating $file"
              # Check for unclosed braces
              open_braces=$(grep -o '{' "$file" | wc -l)
              close_braces=$(grep -o '}' "$file" | wc -l)
              if [ "$open_braces" -ne "$close_braces" ]; then
                echo "❌ CSS syntax error in $file - mismatched braces"
                exit 1
              fi
            fi
          done
          echo "✅ CSS validation passed"

      - name: ⚡ Validate JavaScript
        run: |
          echo "Validating JavaScript files..."
          find assets/js -name "*.js" -exec echo "Checking {}" \;
          # Check for basic JS syntax
          for file in assets/js/*.js; do
            if [ -f "$file" ]; then
              echo "Validating $file"
              # Check for unclosed braces
              open_braces=$(grep -o '{' "$file" | wc -l)
              close_braces=$(grep -o '}' "$file" | wc -l)
              if [ "$open_braces" -ne "$close_braces" ]; then
                echo "❌ JavaScript syntax error in $file - mismatched braces"
                exit 1
              fi
            fi
          done
          echo "✅ JavaScript validation passed"

      - name: 📝 Check file permissions
        run: |
          echo "Checking file permissions..."
          find . -name "*.sh" -exec chmod +x {} \;
          find scripts -name "*.sh" -exec ls -la {} \;

      - name: 📊 Upload validation reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: validation-reports
          path: |
            phpcs-report.xml
            *.log

  # Theme Functionality Tests
  test-theme:
    name: 🧪 Test Theme Functionality
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo

      - name: 📦 Install dependencies
        run: composer install --no-dev --optimize-autoloader

      - name: 🧪 Run theme tests
        run: |
          echo "Running theme functionality tests..."
          
          # Test 1: Check if all required files exist
          echo "🔍 Testing file structure..."
          required_files=(
            "style.css"
            "functions.php"
            "index.php"
            "header.php"
            "footer.php"
            "template-parts/content-member-card-enhanced.php"
            "assets/css/member-cards-enhanced.css"
            "assets/js/member-cards-enhanced.js"
            "includes/member-experience.php"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done
          
          # Test 2: Validate PHP syntax
          echo "🔍 Testing PHP syntax..."
          php_files=$(find . -name "*.php" -not -path "./vendor/*")
          for file in $php_files; do
            if ! php -l "$file" > /dev/null 2>&1; then
              echo "❌ PHP syntax error in $file"
              exit 1
            fi
          done
          echo "✅ PHP syntax validation passed"
          
          # Test 3: Check WordPress theme structure
          echo "🔍 Testing WordPress theme structure..."
          if ! grep -q "Theme Name:" style.css; then
            echo "❌ Missing Theme Name in style.css"
            exit 1
          fi
          
          if ! grep -q "Version:" style.css; then
            echo "❌ Missing Version in style.css"
            exit 1
          fi
          
          echo "✅ WordPress theme structure valid"
          
          # Test 4: Check for proper function definitions
          echo "🔍 Testing function definitions..."
          if ! grep -q "function bcn_get_member_profile_fields" includes/template-tags.php; then
            echo "❌ Missing bcn_get_member_profile_fields function"
            exit 1
          fi
          
          if ! grep -q "function bcn_get_member_card_data" includes/template-tags.php; then
            echo "❌ Missing bcn_get_member_card_data function"
            exit 1
          fi
          
          echo "✅ Required functions present"
          
          echo "🎉 All theme tests passed!"

      - name: 📊 Generate test report
        run: |
          echo "# Theme Test Report" > test-report.md
          echo "## Test Results" >> test-report.md
          echo "- ✅ File structure validation" >> test-report.md
          echo "- ✅ PHP syntax validation" >> test-report.md
          echo "- ✅ WordPress theme structure" >> test-report.md
          echo "- ✅ Function definitions" >> test-report.md
          echo "" >> test-report.md
          echo "## Test Date: $(date)" >> test-report.md
          echo "## Commit: ${{ github.sha }}" >> test-report.md

      - name: 📤 Upload test report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-report.md

  # Build and Prepare Assets
  build:
    name: 🏗️ Build Theme Assets
    runs-on: ubuntu-latest
    needs: [validate, test-theme]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Build theme assets
        run: |
          echo "Building theme assets..."
          
          # Create build directory
          mkdir -p build
          
          # Copy theme files to build directory
          rsync -av --exclude='.git' --exclude='node_modules' --exclude='vendor' --exclude='.github' --exclude='*.md' --exclude='scripts' . build/
          
          # Optimize CSS (basic minification)
          echo "Optimizing CSS..."
          find build/assets/css -name "*.css" -exec sh -c 'echo "Minifying $1" && sed "s/\/\*.*\*\///g; s/\s\+/ /g; s/;\s*/;/g; s/{\s*/{/g; s/}\s*/}/g" "$1" > "$1.tmp" && mv "$1.tmp" "$1"' _ {} \;
          
          # Optimize JavaScript (basic minification)
          echo "Optimizing JavaScript..."
          find build/assets/js -name "*.js" -exec sh -c 'echo "Minifying $1" && sed "s/\/\/.*$//g; s/\s\+/ /g; s/;\s*/;/g" "$1" > "$1.tmp" && mv "$1.tmp" "$1"' _ {} \;
          
          # Set proper permissions
          find build -name "*.sh" -exec chmod +x {} \;
          
          echo "✅ Build completed"

      - name: 📊 Create build manifest
        run: |
          echo "# Build Manifest" > build/BUILD_MANIFEST.txt
          echo "Build Date: $(date)" >> build/BUILD_MANIFEST.txt
          echo "Commit: ${{ github.sha }}" >> build/BUILD_MANIFEST.txt
          echo "Branch: ${{ github.ref_name }}" >> build/BUILD_MANIFEST.txt
          echo "Workflow: ${{ github.workflow }}" >> build/BUILD_MANIFEST.txt
          echo "" >> build/BUILD_MANIFEST.txt
          echo "Files included:" >> build/BUILD_MANIFEST.txt
          find build -type f | sort >> build/BUILD_MANIFEST.txt

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: theme-build
          path: build/

  # Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, test-theme, build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: staging
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: theme-build
          path: build/

      - name: 🔑 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SG_DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SG_HOST || 'staging6.buffalocannabisnetwork.com' }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to staging
        run: |
          echo "Deploying to staging..."
          
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "🚀 Starting deployment to staging..."
          
          # Set deployment variables
          SOURCE="./build"
          HOST="${{ secrets.SG_HOST || 'staging6.buffalocannabisnetwork.com' }}"
          USER="${{ secrets.SG_USER || 'u2037-2lvglkrliykq' }}"
          PORT="${{ secrets.SG_PORT || '18765' }}"
          REMOTE_PATH="${{ secrets.SG_REMOTE_PATH || '/home/u2037-2lvglkrliykq/staging6.buffalocannabisnetwork.com/public_html/wp-content/themes/bcn-wp-theme' }}"
          
          # Create backup
          echo "📦 Creating backup..."
          ssh -p $PORT $USER@$HOST "cp -r $REMOTE_PATH $REMOTE_PATH.backup.$(date +%Y%m%d_%H%M%S) || true"
          
          # Deploy files
          echo "📤 Uploading files..."
          rsync -avz --delete -e "ssh -p $PORT" $SOURCE/ $USER@$HOST:$REMOTE_PATH/
          
          # Set permissions
          echo "🔐 Setting permissions..."
          ssh -p $PORT $USER@$HOST "chmod -R 755 $REMOTE_PATH && find $REMOTE_PATH -type f -name '*.php' -exec chmod 644 {} \;"
          
          echo "✅ Deployment completed successfully!"
          EOF
          
          chmod +x deploy.sh
          ./deploy.sh

      - name: 🧪 Post-deployment tests
        run: |
          echo "Running post-deployment tests..."
          
          # Test staging site accessibility
          echo "🔍 Testing staging site accessibility..."
          if curl -s -o /dev/null -w "%{http_code}" https://staging19.casestudy-labs.com | grep -q "200"; then
            echo "✅ Staging site is accessible"
          else
            echo "❌ Staging site is not accessible"
            exit 1
          fi
          
          # Test member directory page
          echo "🔍 Testing member directory..."
          if curl -s https://staging19.casestudy-labs.com/members/ | grep -q "Member Directory"; then
            echo "✅ Member directory is working"
          else
            echo "⚠️ Member directory may not be working properly"
          fi

      - name: 📊 Create deployment report
        run: |
          echo "# Deployment Report" > deployment-report.md
          echo "## Deployment Details" >> deployment-report.md
          echo "- **Environment**: Staging" >> deployment-report.md
          echo "- **URL**: https://staging19.casestudy-labs.com" >> deployment-report.md
          echo "- **Date**: $(date)" >> deployment-report.md
          echo "- **Commit**: ${{ github.sha }}" >> deployment-report.md
          echo "- **Branch**: ${{ github.ref_name }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## Post-Deployment Tests" >> deployment-report.md
          echo "- ✅ Site accessibility" >> deployment-report.md
          echo "- ✅ Member directory functionality" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## Next Steps" >> deployment-report.md
          echo "1. Test all enhanced member features" >> deployment-report.md
          echo "2. Verify responsive design" >> deployment-report.md
          echo "3. Check performance metrics" >> deployment-report.md
          echo "4. Deploy to production if tests pass" >> deployment-report.md

      - name: 📤 Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md

      - name: 💬 Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "🎉 Deployment to staging completed successfully!"
            echo "🔗 Staging URL: https://staging19.casestudy-labs.com"
          else
            echo "❌ Deployment to staging failed!"
            echo "Check the logs for details."
          fi

  # Deploy to Production (Manual Approval Required)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: theme-build
          path: build/

      - name: 🔑 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PROD_DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PROD_HOST || 'buffalocannabisnetwork.com' }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to production
        run: |
          echo "Deploying to production..."
          # Similar deployment script as staging but for production
          echo "Production deployment would go here"

  # Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always()
    steps:
      - name: 🧹 Clean up artifacts
        run: |
          echo "Cleaning up build artifacts..."
          # Cleanup logic here