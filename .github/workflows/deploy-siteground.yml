name: Deploy to SiteGround

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      live:
        description: 'Set to "true" to perform a live deploy (no dry-run)'
        required: false
        default: 'false'

jobs:
  deploy:
    name: Deploy (rsync)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare SSH key
        env:
          SG_DEPLOY_KEY: ${{ secrets.SG_DEPLOY_KEY }}
        run: |
          if [ -z "$SG_DEPLOY_KEY" ]; then
            echo "SG_DEPLOY_KEY secret is not set" >&2
            exit 1
          fi
          mkdir -p ~/.ssh
          echo "$SG_DEPLOY_KEY" > ~/.ssh/id_siteground
          chmod 600 ~/.ssh/id_siteground
          # add the SiteGround host key to known_hosts to avoid interactive prompts
          # HOST/PORT are hardcoded below by workflow defaults
          ssh-keyscan -p ${SG_PORT:-18765} ${SG_HOST} >> ~/.ssh/known_hosts || true

      - name: Run build (optional)
        run: |
          if [ -f package.json ]; then
            if [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
              npm ci
            else
              npm install
            fi
            if npm run | grep -q " build"; then
              npm run build
            fi
          fi

      - name: Deploy with rsync
        env:
          # Only one secret required: SG_DEPLOY_KEY
          # Default deployment targets (override as needed)
          SG_HOST: staging6.buffalocannabisnetwork.com
          SG_USER: u2037-2lvglkrliykq
          SG_PORT: '18765'
          SG_REMOTE_PATH: /home/u2037-2lvglkrliykq/staging6.buffalocannabisnetwork.com/public_html/wp-content/themes/bcn-wp-theme
          SOURCE: '.'
          # Allow DRY_RUN to be controlled via either: workflow_dispatch input `live` OR repository secret `DRY_RUN`.
          INPUT_LIVE: ${{ github.event.inputs.live }}
          DRY_RUN: ${{ secrets.DRY_RUN }}
        run: |
          : "Deploying $SOURCE to $SG_USER@$SG_HOST:$SG_REMOTE_PATH"
          RSYNC_OPTS='-az --delete --exclude .git --exclude node_modules --exclude .env --exclude build --exclude vendor --exclude archive --exclude "*.md" --exclude composer.* --exclude docker-compose.yml --exclude phpcs.xml.dist --exclude preview --exclude scripts --exclude .github --exclude .cursor --exclude .eslintrc.json --exclude .prettierrc.json --exclude .deployment-trigger --exclude .env.example --exclude .gitignore --verbose'
          SSH_CMD="ssh -i ~/.ssh/id_siteground -p ${SG_PORT} -o IdentitiesOnly=yes -o StrictHostKeyChecking=no"
          # Create remote directory if it doesn't exist
          echo "Creating remote directory..."
          $SSH_CMD "$SG_USER@$SG_HOST" "mkdir -p $SG_REMOTE_PATH"
          # Determine whether to perform a live deploy:
          # - If the workflow was manually dispatched with input live=true, perform live deploy
          # - Else, if repository secret DRY_RUN is set to '0', perform live deploy
          # - Otherwise default to dry-run
          if [ "${INPUT_LIVE:-false}" = "true" ]; then
            DRY_RUN=0
          else
            DRY_RUN="${DRY_RUN:-1}"
          fi
          if [ "$DRY_RUN" = "1" ] || [ -z "$DRY_RUN" ]; then
            echo "DRY RUN: rsync $RSYNC_OPTS -n -e \"$SSH_CMD\" \"${SOURCE%/}/\" \"$SG_USER@$SG_HOST:$SG_REMOTE_PATH/\""
          else
            echo "Performing live deployment..."
            rsync $RSYNC_OPTS -e "$SSH_CMD" "${SOURCE%/}/" "$SG_USER@$SG_HOST:$SG_REMOTE_PATH/"
            echo "Deployment completed. Cleaning up unwanted files and ensuring correct theme files..."
            $SSH_CMD "$SG_USER@$SG_HOST" "cd $SG_REMOTE_PATH && rm -rf .cursor .github archive vendor build && rm -f *.md composer.* docker-compose.yml phpcs.xml.dist .env.example .gitignore .eslintrc.json .prettierrc.json .deployment-trigger .cursorignore LICENSE && rm -f *.tar.gz *.zip && rm -f functions-minimal.php setup-theme.php test-theme.php && rm -f *.bak"
            echo "Cleanup completed. Verifying files..."
            $SSH_CMD "$SG_USER@$SG_HOST" "ls -la $SG_REMOTE_PATH/"
          fi
